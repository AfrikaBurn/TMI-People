{
	"info": {
		"_postman_id": "51188261-ae08-4dc2-ad92-579c1ed2099b",
		"name": "tmi people",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Install",
			"item": [
				{
					"name": "Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "31887572-edcf-4547-b343-214f5f983c94",
								"exec": [
									"pm.test(\"Status OK\", () => pm.response.to.have.status(200))",
									"pm.test(\"Session cookie set\", () => pm.expect(postman.getResponseCookie('tmi.mobi.session')).to.not.eql(undefined))",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Logged in as Administrator\", () => pm.expect(jsonData.data.username).to.eql(\"Administrator\"))",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"Administrator\", \n  \"password\": \"Administrator\"\n}"
						},
						"url": {
							"raw": "localhost:3000/users/login",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "31887572-edcf-4547-b343-214f5f983c94",
								"exec": [
									"pm.test(\"Status OK\", () => pm.response.to.have.status(200))",
									"",
									"var jsonData = pm.response.json();",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "localhost:3000/users/login",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "System Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1c1be6a8-47d6-437d-a2ee-5bcf5abfe932",
								"exec": [
									"pm.test(\"Status OK\", () => pm.response.to.have.status(200))",
									"",
									"const ",
									"    EXPECTED = [",
									"        {",
									"            \"type\": \"user\",",
									"            \"id\": 0,",
									"            \"attributes\": {",
									"                \"username\": \"Anonymous\",",
									"                \"password\": \"*\",",
									"                \"status\": \"active\",",
									"                \"email\": \"no-reply@system.com\",",
									"                \"id\": 0",
									"            }",
									"        },",
									"        {",
									"            \"type\": \"user\",",
									"            \"id\": 1,",
									"            \"attributes\": {",
									"                \"username\": \"Administrator\",",
									"                \"password\": \"*\",",
									"                \"status\": \"active\",",
									"                \"email\": \"no-reply@system.com\",",
									"                \"id\": 1",
									"            }",
									"        }",
									"    ]",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Response is an array of \" + EXPECTED.length, ",
									"    () => {",
									"        pm.expect(jsonData.data.length).to.eql(EXPECTED.length)",
									"    }",
									");",
									"",
									"for (let i=0; i<EXPECTED.length; i++){        ",
									"    pm.test(EXPECTED[i].username + \" account\", ",
									"        () => {",
									"            pm.expect(jsonData.data[i]).to.eql(EXPECTED[i])",
									"        }",
									"    );",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "localhost:3000/users",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "System Groups",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6fc595b9-99a1-4367-9f84-b8679f79b14a",
								"exec": [
									"pm.test(\"Status OK\", () => pm.response.to.have.status(200))",
									"",
									"const ",
									"    EXPECTED = [",
									"        {",
									"            \"name\": \"System\",",
									"            \"description\": \"System operators of this tribe.\",",
									"            \"status\": \"active\",",
									"            \"owner\": {",
									"                \"entityType\": \"user\",",
									"                \"id\": -1",
									"            },",
									"            \"id\": 0",
									"        },",
									"        {",
									"            \"name\": \"Participants\",",
									"            \"description\": \"Tribe participation group.\",",
									"            \"status\": \"active\",",
									"            \"owner\": {",
									"                \"id\": -1",
									"            },",
									"            \"delegate\": {",
									"                \"moderation\": {",
									"                    \"id\": 0",
									"                },",
									"                \"administration\": {",
									"                    \"id\": 0",
									"                }",
									"            },",
									"            \"id\": 1",
									"        }",
									"    ]",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Response is an array of \" + EXPECTED.length, ",
									"    () => {",
									"        pm.expect(jsonData.data.length).to.eql(EXPECTED.length)",
									"    }",
									");",
									"",
									"for (let i=0; i<EXPECTED.length; i++){        ",
									"    pm.test(EXPECTED[i].name + \" group\", ",
									"        () => {",
									"            pm.expect(jsonData.data[i]).to.eql(EXPECTED[i])",
									"        }",
									"    );",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "localhost:3000/groups",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "System Agreements",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "79eea4f5-d3de-46df-a27f-aa3f299fbcb3",
								"exec": [
									"pm.test(\"Status OK\", () => pm.response.to.have.status(200))",
									"",
									"const ",
									"    EXPECTED = [",
									"        {",
									"            \"owner\": {",
									"                \"entityType\": \"group\",",
									"                \"id\": 0",
									"            },",
									"            \"name\": \"administrator\",",
									"            \"schema\": {",
									"                \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"                \"$id\": \"http://tmi.mobi/agreement/administrator/administrator.schema.json\",",
									"                \"type\": \"object\",",
									"                \"title\": \"Administrator Agreement\",",
									"                \"allOf\": [",
									"                    {",
									"                        \"$ref\": \"http://tmi.mobi/agreement/base.agreement.schema.json\"",
									"                    }",
									"                ]",
									"            },",
									"            \"id\": 0",
									"        },",
									"        {",
									"            \"owner\": {",
									"                \"entityType\": \"group\",",
									"                \"id\": 0",
									"            },",
									"            \"name\": \"moderator\",",
									"            \"schema\": {",
									"                \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"                \"$id\": \"http://tmi.mobi/schemas/agreement/default/moderator.json\",",
									"                \"type\": \"object\",",
									"                \"title\": \"Moderator Agreement\",",
									"                \"allOf\": [",
									"                    {",
									"                        \"$ref\": \"http://tmi.mobi/agreement/base.agreement.schema.json\"",
									"                    }",
									"                ]",
									"            },",
									"            \"id\": 1",
									"        },",
									"        {",
									"            \"owner\": {",
									"                \"entityType\": \"group\",",
									"                \"id\": 0",
									"            },",
									"            \"name\": \"member\",",
									"            \"schema\": {",
									"                \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"                \"$id\": \"http://tmi.mobi/agreement/default/member.agreement.schema.json\",",
									"                \"type\": \"object\",",
									"                \"title\": \"Membership Agreement\",",
									"                \"allOf\": [",
									"                    {",
									"                        \"$ref\": \"http://tmi.mobi/agreement/base.agreement.schema.json\"",
									"                    }",
									"                ]",
									"            },",
									"            \"id\": 2",
									"        },",
									"        {",
									"            \"owner\": {",
									"                \"entityType\": \"group\",",
									"                \"id\": 0",
									"            },",
									"            \"name\": \"guest\",",
									"            \"schema\": {",
									"                \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"                \"$id\": \"http://tmi.mobi/schemas/agreement/default/guest.json\",",
									"                \"type\": \"object\",",
									"                \"title\": \"Guest Agreement\",",
									"                \"allOf\": [",
									"                    {",
									"                        \"$ref\": \"http://tmi.mobi/agreement/base.agreement.schema.json\"",
									"                    }",
									"                ]",
									"            },",
									"            \"id\": 3",
									"        }",
									"    ]",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Response is an array of \" + EXPECTED.length, ",
									"    () => {",
									"        pm.expect(jsonData.data.length).to.eql(EXPECTED.length)",
									"    }",
									");",
									"",
									"for (let i=0; i<EXPECTED.length; i++){        ",
									"    pm.test(EXPECTED[i].name + \" agreement\", ",
									"        () => {",
									"            pm.expect(jsonData.data[i]).to.eql(EXPECTED[i])",
									"        }",
									"    );",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "localhost:3000/agreements",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"agreements"
							]
						}
					},
					"response": []
				},
				{
					"name": "Administrator Agreement Endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1f563bda-7a2a-43d1-8c45-383464f83b71",
								"exec": [
									"pm.test(\"Status OK\", () => pm.response.to.have.status(200))",
									"",
									"const ",
									"    EXPECTED = [",
									"        {",
									"            \"promisor\": {",
									"                \"entityType\": \"user\",",
									"                \"id\": 1",
									"            },",
									"            \"promisee\": {",
									"                \"entityType\": \"group\",",
									"                \"id\": 0",
									"            },",
									"            \"id\": 0",
									"        }",
									"    ]",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Response is an array of \" + EXPECTED.length, ",
									"    () => {",
									"        pm.expect(jsonData.data.length).to.eql(EXPECTED.length)",
									"    }",
									");",
									"",
									"for (let i=0; i<EXPECTED.length; i++){        ",
									"    pm.test(\"Agreement entity \" + i, ",
									"        () => {",
									"            pm.expect(jsonData.data[i]).to.eql(EXPECTED[i])",
									"        }",
									"    );",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "localhost:3000/agreements/administrator",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"agreements",
								"administrator"
							]
						}
					},
					"response": []
				},
				{
					"name": "Moderator Agreement Endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ddcbcf7d-1a67-49a2-8c13-9c5b9ab4915a",
								"exec": [
									"pm.test(\"Status OK\", () => pm.response.to.have.status(200))",
									"",
									"const ",
									"    EXPECTED = [",
									"        {",
									"            \"promisor\": {",
									"                \"entityType\": \"user\",",
									"                \"id\": 1",
									"            },",
									"            \"promisee\": {",
									"                \"entityType\": \"group\",",
									"                \"id\": 0",
									"            },",
									"            \"id\": 0",
									"        }",
									"    ]",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Response is an array of \" + EXPECTED.length, ",
									"    () => {",
									"        pm.expect(jsonData.data.length).to.eql(EXPECTED.length)",
									"    }",
									");",
									"",
									"for (let i=0; i<EXPECTED.length; i++){        ",
									"    pm.test(\"Agreement entity \" + i, ",
									"        () => {",
									"            pm.expect(jsonData.data[i]).to.eql(EXPECTED[i])",
									"        }",
									"    );",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "localhost:3000/agreements/moderator",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"agreements",
								"moderator"
							]
						}
					},
					"response": []
				},
				{
					"name": "Member Agreement Endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "797730d1-665e-4ae3-b51b-42282d0dcf93",
								"exec": [
									"pm.test(\"Status OK\", () => pm.response.to.have.status(200))",
									"",
									"const ",
									"    EXPECTED = [",
									"        {",
									"            \"promisor\": {",
									"                \"entityType\": \"user\",",
									"                \"id\": 1",
									"            },",
									"            \"promisee\": {",
									"                \"entityType\": \"group\",",
									"                \"id\": 0",
									"            },",
									"            \"id\": 0",
									"        }",
									"    ]",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Response is an array of \" + EXPECTED.length, ",
									"    () => {",
									"        pm.expect(jsonData.data.length).to.eql(EXPECTED.length)",
									"    }",
									");",
									"",
									"for (let i=0; i<EXPECTED.length; i++){        ",
									"    pm.test(\"Agreement entity \" + i, ",
									"        () => {",
									"            pm.expect(jsonData.data[i]).to.eql(EXPECTED[i])",
									"        }",
									"    );",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "localhost:3000/agreements/member",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"agreements",
								"member"
							]
						}
					},
					"response": []
				},
				{
					"name": "Guest Agreement Endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "797730d1-665e-4ae3-b51b-42282d0dcf93",
								"exec": [
									"pm.test(\"Status OK\", () => pm.response.to.have.status(200))",
									"",
									"const ",
									"    EXPECTED = [",
									"        {",
									"            \"promisor\": {",
									"                \"entityType\": \"user\",",
									"                \"id\": 1",
									"            },",
									"            \"promisee\": {",
									"                \"entityType\": \"group\",",
									"                \"id\": 0",
									"            },",
									"            \"id\": 0",
									"        }",
									"    ]",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Response is an array of \" + EXPECTED.length, ",
									"    () => {",
									"        pm.expect(jsonData.data.length).to.eql(EXPECTED.length)",
									"    }",
									");",
									"",
									"for (let i=0; i<EXPECTED.length; i++){        ",
									"    pm.test(\"Agreement entity \" + i, ",
									"        () => {",
									"            pm.expect(jsonData.data[i]).to.eql(EXPECTED[i])",
									"        }",
									"    );",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "localhost:3000/agreements/guest",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"agreements",
								"guest"
							]
						}
					},
					"response": []
				}
			],
			"description": "Setup tasks required to run test requests.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b95d2658-82c5-451f-9f21-ffdcb9a2f514",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "5edc648f-693b-41dc-94be-444b4e7e6923",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "As anonymous",
			"item": [
				{
					"name": "Prepare",
					"item": [
						{
							"name": "Logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5815bd4f-5177-4e71-bd6a-3749225eb0fb",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status OK\", () => pm.response.to.have.status(200))",
											"pm.test(\"Logged out\", pm.globals.get('NO_SESSION_COOKIE'));",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "localhost:3000/users/logout",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"users",
										"logout"
									]
								},
								"description": "Log the user out of the current session."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Users",
					"item": [
						{
							"name": "Schema",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7cdc9bc3-d707-4fed-b4c1-afd1498faf5d",
										"exec": [
											"pm.test(\"Status OK\", () => pm.response.to.have.status(200))",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"User schema\", function () {",
											"  pm.expect(jsonData.data[\"$id\"]).to.eql(\"http://tmi.mobi/user/user.schema.json\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json;schema"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "localhost:3000/users",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"users"
									]
								},
								"description": "Retrieves the User schema"
							},
							"response": []
						},
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd172cf8-5495-4514-a78b-1eca755605f2",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Should not be allowed\", () => pm.response.to.have.status(403))"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "localhost:3000/users",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"users"
									]
								},
								"description": "Retrieves a list of users"
							},
							"response": []
						},
						{
							"name": "Find",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ad5bd6f4-759a-42c1-8f33-610acf79770c",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Should not be allowed\", () => pm.response.to.have.status(403))"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "localhost:3000/users?username=Test",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"users"
									],
									"query": [
										{
											"key": "username",
											"value": "Test"
										}
									]
								},
								"description": "Retrieves a list of users that satisfy a set of criteria"
							},
							"response": []
						},
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "644c628f-dc3c-4b5a-b886-51d5d9a68fac",
										"exec": [
											"pm.test(\"Status CREATED\", () => pm.response.to.have.status(201))",
											"pm.test(\"Response is an array\", pm.globals.get('BODY_IS_ARRAY'))",
											"",
											"const EXPECTED = 1",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Response is an array of \" + EXPECTED, function () {",
											"    pm.expect(jsonData.data.length).to.eql(EXPECTED)",
											"});",
											"",
											"for (let i=0; i<EXPECTED; i++){        ",
											"    pm.test(i + \": Id property set\", function () {",
											"        pm.expect(jsonData.data[i].id).to.not.eql(undefined)",
											"    });",
											"    pm.test(i + \": Username property set\", function () {",
											"        pm.expect(jsonData.data[i].username).to.not.eql(undefined)",
											"    });",
											"    pm.test(i + \": Email property set\", function () {",
											"        pm.expect(jsonData.data[i].email).to.not.eql(undefined)",
											"    });",
											"    pm.test(i + \": Email property lowercased\", function () {",
											"        pm.expect(jsonData.data[i].email).to.eql(jsonData.data[i].email.toLowerCase())",
											"    });",
											"    pm.test(i + \": Password property set\", function () {",
											"        pm.expect(jsonData.data[i].password).to.not.eql(undefined)",
											"    });",
											"    pm.test(i + \": Password property blanked\", function () {",
											"        pm.expect(jsonData.data[i].password).to.eql(\"*\")",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n\t{\n\t\t\"username\": \"Authenticated\",\n\t\t\"email\": \"Tester@Tester.com\",\n\t\t\"password\": \"Authenticated\"\n\t}\n]"
								},
								"url": {
									"raw": "localhost:3000/users",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"users"
									]
								},
								"description": "Create a user"
							},
							"response": []
						},
						{
							"name": "Logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5815bd4f-5177-4e71-bd6a-3749225eb0fb",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status OK\", () => pm.response.to.have.status(200))",
											"pm.test(\"Logged out\", pm.globals.get('NO_SESSION_COOKIE'));",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "localhost:3000/users/logout",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"users",
										"logout"
									]
								},
								"description": "Log the user out of the current session."
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ed21a8d-73c1-4fb0-84a4-f37a8fff26c6",
										"exec": [
											"pm.test(\"Should not be allowed\", () => pm.response.to.have.status(403))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"Authenticated\",\n  \"email\": \"a@b.c\", \n  \"password\": \"TEST\"\n}"
								},
								"url": {
									"raw": "localhost:3000/users?username=Authenticated",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"users"
									],
									"query": [
										{
											"key": "username",
											"value": "Authenticated"
										}
									]
								},
								"description": "Update a user"
							},
							"response": []
						},
						{
							"name": "Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "399316cc-e714-4c83-90fc-540b3fb99253",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Should not be allowed\", () => pm.response.to.have.status(403))"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"Test\",\n  \"email\": \"a@b.c\", \n  \"password\": \"TEST\"\n}"
								},
								"url": {
									"raw": "localhost:3000/users?username=Test",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"users"
									],
									"query": [
										{
											"key": "username",
											"value": "Test"
										}
									]
								},
								"description": "Delete a user"
							},
							"response": []
						}
					],
					"description": "Requests to the user endpoint.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "36b4ccf2-8d08-4b88-94d4-b883651a1ec1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b1be6024-ccb7-4fb5-a6c9-f529e8e74f13",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Groups",
					"item": [
						{
							"name": "Schema",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1041af6f-18c5-4a17-98c9-5818e24b2ff0",
										"exec": [
											"pm.test(\"Status OK\", () => pm.response.to.have.status(200))",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Group schema\", function () {",
											"  pm.expect(jsonData.data[\"$id\"]).to.eql(\"http://tmi.mobi/group/group.schema.json\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json;schema"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "localhost:3000/groups",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"groups"
									]
								},
								"description": "Retrieves the User schema"
							},
							"response": []
						},
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b10a915b-d5c5-48a2-b859-ed4750c86e5f",
										"exec": [
											"pm.test(\"Status OK\", () => pm.response.to.have.status(200))",
											"",
											"pm.test(\"Response is an array\", pm.globals.get('BODY_IS_ARRAY'))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "localhost:3000/groups",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"groups"
									]
								},
								"description": "Retrieves the User schema"
							},
							"response": []
						},
						{
							"name": "Find - add more tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "170f9ae3-a67a-426c-8f8b-0f325642793f",
										"exec": [
											"pm.test(\"Status OK\", () => pm.response.to.have.status(200))",
											"pm.test(\"Response is an array\", pm.globals.get('BODY_IS_ARRAY'))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "localhost:3000/groups?name=Participants",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"groups"
									],
									"query": [
										{
											"key": "name",
											"value": "Participants"
										}
									]
								},
								"description": "Retrieves a list of users that satisfy a set of criteria"
							},
							"response": []
						},
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4d7fe3fe-6b75-4634-a991-65cc34517d41",
										"exec": [
											"pm.test(\"Should not be allowed\", () => pm.response.to.have.status(403))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n\t{\n\t\t\"name\": \"Test Group\",\n\t\t\"description\": \"A little test is a Testicle.\",\n\t\t\"status\": \"active\",\n\t\t\"owner\": {\n\t\t\t\"entityType\": \"user\",\n\t\t\t\"id\": 2\n\t\t}\n\t}\n]"
								},
								"url": {
									"raw": "localhost:3000/groups",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"groups"
									]
								},
								"description": "Create a user"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Agreements",
					"item": [
						{
							"name": "Schema",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "59c07c9b-e95e-4c07-a1f4-c0a3112fb965",
										"exec": [
											"pm.test(\"Should not be allowed\", () => pm.response.to.have.status(403))",
											"pm.test(\"Response is an array\", pm.globals.get('BODY_IS_ARRAY'))",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json;schema"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "localhost:3000/agreements",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"agreements"
									]
								},
								"description": "Retrieves the User schema"
							},
							"response": []
						},
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2de856bb-1fbd-474d-a355-5a4529b5426b",
										"exec": [
											"pm.test(\"Should not be allowed\", () => pm.response.to.have.status(403))",
											"pm.test(\"Response is an array\", pm.globals.get('BODY_IS_ARRAY'))",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "localhost:3000/agreements",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"agreements"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "633536e3-7bc6-4a5b-8705-46f448c2bb3c",
										"exec": [
											"pm.test(\"Should not be allowed\", () => pm.response.to.have.status(403))",
											"pm.test(\"Response is an array\", pm.globals.get('BODY_IS_ARRAY'))",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "localhost:3000/agreements?name=guest",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"agreements"
									],
									"query": [
										{
											"key": "name",
											"value": "guest"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "644c628f-dc3c-4b5a-b886-51d5d9a68fac",
										"exec": [
											"pm.test(\"Should not be allowed\", () => pm.response.to.have.status(403))",
											"pm.test(\"Response is an array\", pm.globals.get('BODY_IS_ARRAY'))",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n\t{\n\t\t\"owner\": {\"entityType\": \"group\", \"id\": 0},\n\t\t\"name\": \"test-agreement\",\n\t\t\"schema\": {\n\t\t\t\"$schema\": \"http://json-schema.org/draft-07/schema#\",\n\t\t\t\"$id\": \"http://tmi.mobi/schemas/agreement/test-agreement\",\n\t\t\t\n\t\t\t\"type\": \"object\",\n\t\t\t\"title\": \"Test Agreement\",\n\t\t\t\n\t\t\t\"allOf\": [\n\t\t\t\t{\"$ref\": \"http://tmi.mobi/agreement/base.agreement.schema.json\"}\n\t\t\t],\n\t\t\t\"properties\": {\n\t\t\t\t\"newProp\": {\"type\": \"string\"}\n\t\t\t}\n\t\t}\n\t}\n]"
								},
								"url": {
									"raw": "localhost:3000/agreements",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"agreements"
									]
								},
								"description": "Create a user"
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "644c628f-dc3c-4b5a-b886-51d5d9a68fac",
										"exec": [
											"pm.test(\"Should not be allowed\", () => pm.response.to.have.status(403))",
											"pm.test(\"Response is an array\", pm.globals.get('BODY_IS_ARRAY'))",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"owner\": {\"entityType\": \"group\", \"id\": 0},\n\t\"name\": \"test-agreement\",\n\t\"schema\": {\n\t\t\"$schema\": \"http://json-schema.org/draft-07/schema#\",\n\t\t\"$id\": \"http://tmi.mobi/schemas/agreement/test-agreement\",\n\t\t\n\t\t\"type\": \"object\",\n\t\t\"title\": \"Test Agreement\",\n\t\t\n\t\t\"allOf\": [\n\t\t\t{\"$ref\": \"http://tmi.mobi/agreement/base.agreement.schema.json\"}\n\t\t],\n\t\t\"properties\": {\n\t\t\t\"newProp\": {\"type\": \"boolean\"}\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "localhost:3000/agreements?name=test-agreement",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"agreements"
									],
									"query": [
										{
											"key": "name",
											"value": "test-agreement"
										}
									]
								},
								"description": "Create a user"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"description": "Requests bu unauthenticated users.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d698331c-b681-478e-bfbb-a2f25497b555",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "58c91c37-64db-49d8-bc01-c75250b3194a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "As administrator",
			"item": [
				{
					"name": "Prepare",
					"item": [
						{
							"name": "Authenticate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c6487877-4fd2-4717-8c9e-b3fc707c8b4a",
										"exec": [
											"pm.test(\"Status OK\", () => pm.response.to.have.status(200))",
											"pm.test(\"Logged in\", () => pm.expect(postman.getResponseCookie('tmi.mobi.session')).to.not.eql(undefined))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"Administrator\", \n  \"password\": \"Administrator\"\n}"
								},
								"url": {
									"raw": "localhost:3000/users/login",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Users",
					"item": [
						{
							"name": "Schema",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4050ebe2-11bd-439b-b251-42006eabf656",
										"exec": [
											"pm.test(\"Status OK\", () => pm.response.to.have.status(200))",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"User schema\", function () {",
											"  pm.expect(jsonData.data[\"$id\"]).to.eql(\"http://tmi.mobi/user/user.schema.json\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json;schema"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "localhost:3000/users",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"users"
									]
								},
								"description": "Retrieves the User schema"
							},
							"response": []
						},
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4dee1b45-6a06-443a-871c-7c036c375119",
										"exec": [
											"pm.test(\"Status OK\", () => pm.response.to.have.status(200))",
											"",
											"pm.test(\"Response is an array\", pm.globals.get('BODY_IS_ARRAY'))",
											"",
											"const EXPECTED = 3",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Response is an array of \" + EXPECTED, function () {",
											"    pm.expect(jsonData.data.length).to.eql(EXPECTED)",
											"});",
											"",
											"for (let i=0; i<EXPECTED; i++){        ",
											"    pm.test(i + \": Id property set\", function () {",
											"        pm.expect(jsonData.data[i].id).to.not.eql(undefined)",
											"    });",
											"    pm.test(i + \": Username property set\", function () {",
											"        pm.expect(jsonData.data[i].attributes.username).to.not.eql(undefined)",
											"    });",
											"    pm.test(i + \": Email property set\", function () {",
											"        pm.expect(jsonData.data[i].attributes.email).to.not.eql(undefined)",
											"    });",
											"    pm.test(i + \": Email property lowercased\", function () {",
											"        pm.expect(jsonData.data[i].attributes.email).to.eql(jsonData.data[i].attributes.email.toLowerCase())",
											"    });",
											"    pm.test(i + \": Password property set\", function () {",
											"        pm.expect(jsonData.data[i].attributes.password).to.not.eql(undefined)",
											"    });",
											"    pm.test(i + \": Password property blanked\", function () {",
											"        pm.expect(jsonData.data[i].attributes.password).to.eql(\"*\")",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "localhost:3000/users",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"users"
									]
								},
								"description": "Retrieves a list of users"
							},
							"response": []
						},
						{
							"name": "Find",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0feed6e4-6226-46a2-88d5-b02164202f69",
										"exec": [
											"pm.test(\"Status OK\", () => pm.response.to.have.status(200))",
											"",
											"pm.test(\"Response is an array\", pm.globals.get('BODY_IS_ARRAY'))",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Response is an array of 1\", function () {",
											"    pm.expect(jsonData.data.length).to.eql(1)",
											"});",
											"",
											"pm.test(\"Correct username\", function () {",
											"    pm.expect(jsonData.data[0].attributes.username).to.eql('Authenticated')",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "localhost:3000/users?username=Authenticated",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"users"
									],
									"query": [
										{
											"key": "username",
											"value": "Authenticated"
										}
									]
								},
								"description": "Retrieves a list of users that satisfy a set of criteria"
							},
							"response": []
						},
						{
							"name": "Create - review tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c77e2209-c623-4c68-bebe-218b68ac109f",
										"exec": [
											"pm.test(\"Status CREATED\", () => pm.response.to.have.status(201))",
											"pm.test(\"Response is an array\", pm.globals.get('BODY_IS_ARRAY'))",
											"",
											"const EXPECTED = 1",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Response is an array of \" + EXPECTED, function () {",
											"    pm.expect(jsonData.data.length).to.eql(EXPECTED)",
											"});",
											"",
											"for (let i=0; i<EXPECTED; i++){        ",
											"    pm.test(i + \": Id property set\", function () {",
											"        pm.expect(jsonData.data[i].id).to.not.eql(undefined)",
											"    });",
											"    pm.test(i + \": Username property set\", function () {",
											"        pm.expect(jsonData.data[i].username).to.not.eql(undefined)",
											"    });",
											"    pm.test(i + \": Email property set\", function () {",
											"        pm.expect(jsonData.data[i].email).to.not.eql(undefined)",
											"    });",
											"    pm.test(i + \": Email property lowercased\", function () {",
											"        pm.expect(jsonData.data[i].email).to.eql(jsonData.data[i].email.toLowerCase())",
											"    });",
											"    pm.test(i + \": Password property set\", function () {",
											"        pm.expect(jsonData.data[i].password).to.not.eql(undefined)",
											"    });",
											"    pm.test(i + \": Password property blanked\", function () {",
											"        pm.expect(jsonData.data[i].password).to.eql(\"*\")",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n\t{\n\t\t\"username\": \"Tester\",\n        \"email\": \"Tester@Tester.com\",\n        \"password\": \"Tester0\"\n\t}\n]"
								},
								"url": {
									"raw": "localhost:3000/users",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"users"
									]
								},
								"description": "Create a user"
							},
							"response": []
						},
						{
							"name": "Update - add tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19ee65ef-74b1-468a-9b2f-de3bd07c4d9b",
										"exec": [
											"pm.test(\"Status OK\", () => pm.response.to.have.status(200))",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"Tester\",\n  \"email\": \"a@b.com\",\n  \"password\": \"TEST\"\n}"
								},
								"url": {
									"raw": "localhost:3000/users?username=Tester",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"users"
									],
									"query": [
										{
											"key": "username",
											"value": "Tester"
										}
									]
								},
								"description": "Update a user"
							},
							"response": []
						},
						{
							"name": "Delete - review tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a077f8f4-0229-458e-b512-3dbcf9c63d4d",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status OK\", () => pm.response.to.have.status(200))",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "localhost:3000/users?username=Tester",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"users"
									],
									"query": [
										{
											"key": "username",
											"value": "Tester"
										}
									]
								},
								"description": "Delete a user"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Groups",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dc104a7b-b1ff-4bf0-8cca-25c7f1c7ab3c",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status OK\", () => pm.response.to.have.status(201))",
											"pm.test(\"Response is an array\", pm.globals.get('BODY_IS_ARRAY'))",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n\t{\n\t\t\"name\": \"Test Group\",\n\t\t\"description\": \"A little test is a Testicle.\",\n\t\t\"status\": \"active\",\n\t\t\"owner\": {\n\t\t\t\"entityType\": \"user\",\n\t\t\t\"id\": 2\n\t\t}\n\t}\n]"
								},
								"url": {
									"raw": "localhost:3000/groups",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"groups"
									]
								},
								"description": "Create a user"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "af896ee3-c59c-407d-a8f6-3d01b6629c07",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status OK\", () => pm.response.to.have.status(200))",
									"",
									"pm.test(\"Logged out\", () => ",
									"    pm.expect(pm.globals.get('SESSION_COOKIE')).to.eql(undefined)",
									")",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "localhost:3000/users/logout",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"users",
								"logout"
							]
						},
						"description": "Log the user out of the current session."
					},
					"response": []
				}
			]
		},
		{
			"name": "As user",
			"item": [
				{
					"name": "Authenticate",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9c86c721-4ca8-435f-b318-29ee2d40a62f",
								"exec": [
									"pm.test(\"Status OK\", () => pm.response.to.have.status(200))",
									"pm.test(\"Logged in\", () => pm.expect(postman.getResponseCookie('tmi.mobi.session')).to.not.eql(undefined))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"Authenticated\", \n  \"password\": \"Authenticated\"\n}"
						},
						"url": {
							"raw": "localhost:3000/users/login",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a288af22-31df-4068-8a5e-b4a618aaeb02",
								"exec": [
									"pm.test(\"Status OK\", () => pm.response.to.have.status(200))",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"User schema\", function () {",
									"  pm.expect(jsonData.data[\"$id\"]).to.eql(\"http://tmi.mobi/user/user.schema.json\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json;schema"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "localhost:3000/users",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"users"
							]
						},
						"description": "Retrieves the User schema"
					},
					"response": []
				},
				{
					"name": "List - review tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7c432c58-d993-49dc-b6b5-76684300d573",
								"exec": [
									"pm.test(\"Status OK\", () => pm.response.to.have.status(200))",
									"",
									"const EXPECTED = 3",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Response is an array of \" + EXPECTED, function () {",
									"    pm.expect(jsonData.data.length).to.eql(EXPECTED)",
									"});",
									"",
									"for (let i=0; i<EXPECTED; i++){        ",
									"    pm.test(i + \": Id property set\", function () {",
									"        pm.expect(jsonData.data[i].id).to.not.eql(undefined)",
									"    });",
									"    pm.test(i + \": Username property set\", function () {",
									"        pm.expect(jsonData.data[i].attributes.username).to.not.eql(undefined)",
									"    });",
									"    pm.test(i + \": Email property set\", function () {",
									"        pm.expect(jsonData.data[i].attributes.email).to.not.eql(undefined)",
									"    });",
									"    pm.test(i + \": Email property lowercased\", function () {",
									"        pm.expect(jsonData.data[i].attributes.email).to.eql(jsonData.data[i].attributes.email.toLowerCase())",
									"    });",
									"    pm.test(i + \": Password property set\", function () {",
									"        pm.expect(jsonData.data[i].attributes.password).to.not.eql(undefined)",
									"    });",
									"    pm.test(i + \": Password property blanked\", function () {",
									"        pm.expect(jsonData.data[i].attributes.password).to.eql(\"*\")",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "localhost:3000/users",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"users"
							]
						},
						"description": "Retrieves a list of users"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "b13a292c-beaa-47ed-acd2-3d9e241f7676",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "c728ef4c-21f7-4962-a7d7-cfd2dd78fbcf",
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Content-Type is present\", () => pm.response.to.have.header(\"Content-Type\"))",
					"pm.test(\"Response is JSON\", () => pm.response.to.be.json)",
					"pm.test(\"Response has body\", () => pm.response.to.be.withBody)",
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "f22192e3-3be8-45b6-a09f-e969fb4c6f69",
			"key": "NO_ERROR",
			"value": "function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.error).to.eql(undefined);\n}",
			"type": "string"
		},
		{
			"id": "5bd80ccc-c94c-45de-9b57-f7e604bda340",
			"key": "BODY_IS_ARRAY",
			"value": "function () {\n    pm.expect(jsonData.data.length).to.not.eql(undefined);\n}",
			"type": "string"
		},
		{
			"id": "0553a663-58b9-4dac-a3e6-3f8569807dd5",
			"key": "NO_SESSION_COOKIE",
			"value": "function () {\n postman.getResponseCookie('connect.sid').to.eql(undefined);\n}",
			"type": "string"
		},
		{
			"id": "5d5f197b-055b-44f2-afd1-434e41543bd1",
			"key": "USER_ARRAY",
			"value": "function () {\n  pm.test(\"Response is an array of \" + EXPECTED, function () {\n    pm.expect(jsonData.data.length).to.eql(EXPECTED)\n  });\n  for (let i=0; i<EXPECTED; i++){        \n    pm.test(i + \": Id property set\", function () {\n      pm.expect(jsonData.data[i].id).to.not.eql(undefined);\n    });\n    pm.test(i + \": Username property set\", function () {\n      pm.expect(jsonData.data[i].username).to.not.eql(undefined);\n    });\n    pm.test(i + \": Email property set\", function () {\n      pm.expect(jsonData.data[i].email.value).to.not.eql(undefined);\n    });\n    pm.test(i + \": Email property lowercased\", function () {\n      pm.expect(jsonData.data[i].email.value).to.eql(\"tester@tester.com\");\n    });\n    pm.test(i + \": Email privacy set\", function () {\n      pm.expect(jsonData.data[i].email.privacy).to.eql(\"private\");\n    });\n    pm.test(i + \": Password property set\", function () {\n      pm.expect(jsonData.data[i].password).to.not.eql(undefined);\n    });\n    pm.test(i + \": Password property blanked\", function () {\n      pm.expect(jsonData.data[i].password).to.eql(\"*\");\n    });\n  }\n}",
			"type": "string"
		}
	]
}